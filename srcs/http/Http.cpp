#include "Http.hpp"

HttpStatus::HttpStatus() : code(STATUS_OK), message(HTTP_STATUS_OK) {}

HttpStatus::HttpStatus(HttpStatusCode code) : code(code), message(get_status_message(code)) {}

HttpStatus::HttpStatus(const HttpStatus& other) : code(other.code), message(other.message) {}

const char* get_status_message(HttpStatusCode status)
{
    switch (status)
    {
    case STATUS_CONTINUE:
        return HTTP_STATUS_CONTINUE;
    case STATUS_SWITCHING_PROTOCOLS:
        return HTTP_STATUS_SWITCHING_PROTOCOLS;
    case STATUS_PROCESSING:
        return HTTP_STATUS_PROCESSING;
    case STATUS_OK:
        return HTTP_STATUS_OK;
    case STATUS_CREATED:
        return HTTP_STATUS_CREATED;
    case STATUS_ACCEPTED:
        return HTTP_STATUS_ACCEPTED;
    case STATUS_NON_AUTHORITATIVE_INFORMATION:
        return HTTP_STATUS_NON_AUTHORITATIVE_INFORMATION;
    case STATUS_NO_CONTENT:
        return HTTP_STATUS_NO_CONTENT;
    case STATUS_RESET_CONTENT:
        return HTTP_STATUS_RESET_CONTENT;
    case STATUS_PARTIAL_CONTENT:
        return HTTP_STATUS_PARTIAL_CONTENT;
    case STATUS_MULTIPLE_CHOICES:
        return HTTP_STATUS_MULTIPLE_CHOICES;
    case STATUS_MOVED_PERMANENTLY:
        return HTTP_STATUS_MOVED_PERMANENTLY;
    case STATUS_FOUND:
        return HTTP_STATUS_FOUND;
    case STATUS_SEE_OTHER:
        return HTTP_STATUS_SEE_OTHER;
    case STATUS_NOT_MODIFIED:
        return HTTP_STATUS_NOT_MODIFIED;
    case STATUS_USE_PROXY:
        return HTTP_STATUS_USE_PROXY;
    case STATUS_TEMPORARY_REDIRECT:
        return HTTP_STATUS_TEMPORARY_REDIRECT;
    case STATUS_PERMANENT_REDIRECT:
        return HTTP_STATUS_PERMANENT_REDIRECT;
    case STATUS_BAD_REQUEST:
        return HTTP_STATUS_BAD_REQUEST;
    case STATUS_UNAUTHORIZED:
        return HTTP_STATUS_UNAUTHORIZED;
    case STATUS_PAYMENT_REQUIRED:
        return HTTP_STATUS_PAYMENT_REQUIRED;
    case STATUS_FORBIDDEN:
        return HTTP_STATUS_FORBIDDEN;
    case STATUS_NOT_FOUND:
        return HTTP_STATUS_NOT_FOUND;
    case STATUS_METHOD_NOT_ALLOWED:
        return HTTP_STATUS_METHOD_NOT_ALLOWED;
    case STATUS_NOT_ACCEPTABLE:
        return HTTP_STATUS_NOT_ACCEPTABLE;
    case STATUS_PROXY_AUTHENTICATION_REQUIRED:
        return HTTP_STATUS_PROXY_AUTHENTICATION_REQUIRED;
    case STATUS_REQUEST_TIMEOUT:
        return HTTP_STATUS_REQUEST_TIMEOUT;
    case STATUS_CONFLICT:
        return HTTP_STATUS_CONFLICT;
    case STATUS_GONE:
        return HTTP_STATUS_GONE;
    case STATUS_LENGTH_REQUIRED:
        return HTTP_STATUS_LENGTH_REQUIRED;
    case STATUS_PRECONDITION_FAILED:
        return HTTP_STATUS_PRECONDITION_FAILED;
    case STATUS_REQUEST_ENTITY_TOO_LARGE:
        return HTTP_STATUS_REQUEST_ENTITY_TOO_LARGE;
    case STATUS_REQUEST_URI_TOO_LONG:
        return HTTP_STATUS_REQUEST_URI_TOO_LONG;
    case STATUS_UNSUPPORTED_MEDIA_TYPE:
        return HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE;
    case STATUS_REQUESTED_RANGE_NOT_SATISFIABLE:
        return HTTP_STATUS_REQUESTED_RANGE_NOT_SATISFIABLE;
    case STATUS_EXPECTATION_FAILED:
        return HTTP_STATUS_EXPECTATION_FAILED;
    case STATUS_IM_A_TEAPOT:
        return HTTP_STATUS_IM_A_TEAPOT;
    case STATUS_MISDIRECTED_REQUEST:
        return HTTP_STATUS_MISDIRECTED_REQUEST;
    case STATUS_UNPROCESSABLE_ENTITY:
        return HTTP_STATUS_UNPROCESSABLE_ENTITY;
    case STATUS_LOCKED:
        return HTTP_STATUS_LOCKED;
    case STATUS_FAILED_DEPENDENCY:
        return HTTP_STATUS_FAILED_DEPENDENCY;
    case STATUS_TOO_EARLY:
        return HTTP_STATUS_TOO_EARLY;
    case STATUS_UPGRADE_REQUIRED:
        return HTTP_STATUS_UPGRADE_REQUIRED;
    case STATUS_PRECONDITION_REQUIRED:
        return HTTP_STATUS_PRECONDITION_REQUIRED;
    case STATUS_TOO_MANY_REQUESTS:
        return HTTP_STATUS_TOO_MANY_REQUESTS;
    case STATUS_REQUEST_HEADER_FIELDS_TOO_LARGE:
        return HTTP_STATUS_REQUEST_HEADER_FIELDS_TOO_LARGE;
    case STATUS_UNAVAILABLE_FOR_LEGAL_REASONS:
        return HTTP_STATUS_UNAVAILABLE_FOR_LEGAL_REASONS;
    case STATUS_INTERNAL_SERVER_ERROR:
        return HTTP_STATUS_INTERNAL_SERVER_ERROR;
    case STATUS_NOT_IMPLEMENTED:
        return HTTP_STATUS_NOT_IMPLEMENTED;
    case STATUS_BAD_GATEWAY:
        return HTTP_STATUS_BAD_GATEWAY;
    case STATUS_SERVICE_UNAVAILABLE:
        return HTTP_STATUS_SERVICE_UNAVAILABLE;
    case STATUS_GATEWAY_TIMEOUT:
        return HTTP_STATUS_GATEWAY_TIMEOUT;
    case STATUS_HTTP_VERSION_NOT_SUPPORTED:
        return HTTP_STATUS_HTTP_VERSION_NOT_SUPPORTED;
    default:
        return HTTP_STATUS_INTERNAL_SERVER_ERROR;
    }
}